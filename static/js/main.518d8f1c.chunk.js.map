{"version":3,"sources":["components/PoolInfo.js","lib/transactions.js","lib/constants.js","components/PoolJoin.js","lib/pools.js","../node_modules/@stencil/core/internal/client lazy /^/.//.*$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","lib/auth.js","pages/Landing.js","components/Auth.js","App.js","index.js","UserSession.js","lib/account.js","lib/pools-utils.js"],"names":["PoolInfo","pool","contractId","getPoolContractId","data","url","href","usernameCVToName","name","verified","type","ClarityType","BoolTrue","src","alt","width","cvToString","delegatee","List","list","map","lp","value","toString","join","OptionalSome","toNumber","address","poxCVToBtcAddress","TxStatus","txId","resultPrefix","useState","loading","processingResult","setProcessingResult","spinner","useRef","useEffect","sub","console","log","current","classList","remove","update","a","connectWebSocketClient","STACKS_API_WS_URL","client","subscribeTxUpdates","subscribe","event","tx_status","transactionsApi","getTransactionById","tx","result","tx_result","startsWith","undefined","add","unsubscribe","normalizedTxId","repr","ref","role","className","CONTRACT_ADDRESS","POOL_REGISTRY_CONTRACT_NAME","GENESIS_CONTRACT_ADDRESS","BNS_CONTRACT_NAME","authOrigin","STACK_API_URL","STACKS_API_ACCOUNTS_URL","NETWORK","StacksMainnet","coreApiUrl","basePath","config","Configuration","accountsApi","AccountsApi","smartContractsApi","SmartContractsApi","TransactionsApi","InfoApi","getPayoutAddressCV","payout","poxAddrCVFromBitcoin","poxAddrCV","tupleCV","hashbytes","bufferCV","Buffer","from","version","PoolJoin","ownerStxAddress","userSession","doContractCall","useStacksJsConnect","amount","duration","payoutAddress","lockingPeriod","status","setStatus","setTxId","fetchAccount","catch","e","then","acc","getAccountBalance","principal","balance","stxBalance","parseInt","stx","locked","isSimple","contract","split","contractAddress","contractName","parts","delegateeCV","length","standardPrincipalCV","contractPrincipalCV","rewardBtcAddressCV","someCV","getPayout","userPayoutAddress","stxAddress","c32","getPayoutAddress","poolData","joinAction","amountCV","uintCV","trim","durationCV","noneCV","payoutAddressCV","lockingPeriodCV","functionArgs","functionName","postConditionMode","PostConditionMode","Deny","postConditions","network","finished","step","min","placeholder","onKeyUp","key","focus","onBlur","disabled","readOnly","defaultValue","onClick","fetchPool","poolId","callReadOnlyFunction","senderAddress","receipt","OptionalNone","fetchPools","verify","offset","idsCV","Array","keys","i","listCV","Promise","all","cv","index","poolCV","verifyUrl","trueCV","falseCV","verifiedPools","reduce","push","nameToUsernameCV","fullQualifiedName","namespace","bufferCVFromString","usernameCV","buffer","whiteListedUrls","username","whiteListedUsername","fetch","json","manifest","author","whiteListedContracts","findTraitIndex","ctrAddress","ctrName","verifyContractTrait","registerFunctions","updateFunctions","contractCV","ext","traitName","path","isImplemented","is_implemented","webpackEmptyAsyncContext","req","resolve","Error","code","module","exports","id","appConfig","AppConfig","userSessionState","atom","UserSession","userDataState","authResponseState","useConnect","useAtom","setUserData","useUpdateAtom","setAuthResponse","onFinish","payload","authResponse","loadUserData","userData","authOptions","redirectTo","manifestPath","appDetails","icon","handleOpenAuth","showConnect","handleSignOut","useCallback","signUserOut","Landing","props","Auth","isUserSignedIn","App","isSignInPending","handlePendingSignIn","Content","authenticated","decentralizedID","ReactDOM","render","document","getElementById","getStacksAccount","appPrivateKey","privateKey","createStacksPrivateKey","publicKey","getPublicKey","addressFromPublicKeys","AddressVersion","MainnetSingleSig","AddressHashMode","SerializeP2PKH","addressAsString","response","reject","getUsername","readOnlyFunctionArgs","sender","arguments","cvToHex","nameResult","okay","resultCV","hexToCV","ResponseOk","decodeBtcAddress","btcAddress","hashMode","fromBech32","SerializeP2WSH","SerializeP2WPKH","fromBase58Check","SerializeP2SH","getAddressHashMode","hash","decodeStxAddress","toBase58Check","mainnet","addressHashModeToBtcVersion","valueOf"],"mappings":"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","file":"static/js/main.518d8f1c.chunk.js","sourcesContent":["import { ClarityType, cvToString } from '@stacks/transactions';\nimport { getPoolContractId, usernameCVToName } from '../lib/pools';\nimport { poxCVToBtcAddress } from '../lib/pools-utils';\n\nexport default function PoolInfo({ pool }) {\n  const contractId = getPoolContractId(pool);\n\n  return (\n    <>\n      <h5>\n        {pool.data.url.data ? (\n          <a href={pool.data.url.data}>{usernameCVToName(pool.data.name)}</a>\n        ) : (\n          <>{usernameCVToName(pool.data.name)}</>\n        )}\n        {pool.data.verified && pool.data.verified.type === ClarityType.BoolTrue && (\n          <>\n            {' '}\n            <a href={`${pool.data.url.data}/manifest.json`}>\n              <img src=\"/verified.svg\" alt=\"verified\" width=\"16\" />\n            </a>\n          </>\n        )}\n      </h5>\n      <p>\n        {cvToString(pool.data.delegatee)}\n        <br />\n        {pool.data['locking-period'].type === ClarityType.List\n          ? `Locking for ${pool.data['locking-period'].list\n              .map(lp => lp.value.toString(10))\n              .join(', ')} cycles.`\n          : 'Variable locking period'}\n        <br />\n        {pool.data['minimum-ustx'].type === ClarityType.OptionalSome\n          ? `Minimum amount required to join: ${\n              pool.data['minimum-ustx'].value.value.toNumber() / 1000000\n            } STX`\n          : 'No minimum STX required.'}\n        <br />\n        Payout in {pool.data['payout'].data}.\n        <br />\n        {pool.data['date-of-payout'].data ? (\n          <>When payout? {pool.data['date-of-payout'].data}.</>\n        ) : (\n          <>No information about payout date available.</>\n        )}\n        <br />\n        {pool.data['fees'].data\n          ? `Fees: ${pool.data['fees'].data}`\n          : 'No information about fees available.'}\n        <br />\n        Reward addresses:\n        <br />\n        {pool.data['pox-address'].list.map(address => {\n          return (\n            <>\n              {poxCVToBtcAddress(address)}\n              <br />\n            </>\n          );\n        })}\n        Using contract:\n        <br />\n        {contractId}\n        <br />\n      </p>\n    </>\n  );\n}\n","import { serializeCV, hexToCV as stacksHexToCV } from '@stacks/transactions';\nimport { connectWebSocketClient } from '@stacks/blockchain-api-client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { STACKS_API_WS_URL, STACK_API_URL, transactionsApi } from './constants';\n\nexport function resultToStatus(result) {\n  if (result && !result.error && result.startsWith('\"') && result.length === 66) {\n    const txId = result.substr(1, 64);\n    return txIdToStatus(txId);\n  } else if (result && result.error) {\n    return JSON.stringify(result);\n  } else {\n    return result.toString();\n  }\n}\n\nexport function txIdToStatus(txId) {\n  return (\n    <>\n      Check transaction status: <a href={txUrl(txId)}>{txId}</a>\n    </>\n  );\n}\n\nexport function cvToHex(value) {\n  return `0x${serializeCV(value).toString('hex')}`;\n}\n\nexport function hexToCV(hexString) {\n  return stacksHexToCV(hexString);\n}\n\nexport function txUrl(txId) {\n  return `https://explorer.stacks.co/txid/0x${txId}?chain=mainnet`;\n}\n\nexport function TxStatus({ txId, resultPrefix }) {\n  const [processingResult, setProcessingResult] = useState({ loading: false });\n  const spinner = useRef();\n\n  useEffect(() => {\n    if (!txId) {\n      return;\n    }\n    console.log(txId);\n    spinner.current.classList.remove('d-none');\n    setProcessingResult({ loading: true });\n\n    let sub;\n    const subscribe = async (txId, update) => {\n      try {\n        const client = await connectWebSocketClient(STACKS_API_WS_URL);\n        sub = await client.subscribeTxUpdates(txId, update);\n        console.log({ client, sub });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    subscribe(txId, async event => {\n      console.log(event);\n      let result;\n      if (event.tx_status === 'pending') {\n        return;\n      } else if (event.tx_status === 'success') {\n        const tx = await transactionsApi.getTransactionById({ txId });\n        console.log(tx);\n        result = tx.tx_result;\n      } else if (event.tx_status.startsWith('abort')) {\n        result = undefined;\n      }\n      spinner.current.classList.add('d-none');\n      setProcessingResult({ loading: false, result });\n      await sub.unsubscribe();\n    });\n  }, [txId]);\n\n  if (!txId) {\n    return null;\n  }\n\n  const normalizedTxId = txId.startsWith('0x') ? txId : `0x${txId}`;\n  return (\n    <>\n      {processingResult.loading && (\n        <>\n          Checking transaction status:{' '}\n          <a href={`https://explorer.stacks.co/txid/${normalizedTxId}?chain=mainnet`}>\n            {normalizedTxId}\n          </a>\n        </>\n      )}\n      {!processingResult.loading && processingResult.result && (\n        <>\n          {resultPrefix}\n          {processingResult.result.repr}\n        </>\n      )}{' '}\n      <div\n        ref={spinner}\n        role=\"status\"\n        className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n      />\n    </>\n  );\n}\n","import {\n  TransactionsApi,\n  SmartContractsApi,\n  AccountsApi,\n  Configuration,\n  InfoApi,\n} from '@stacks/blockchain-api-client';\nimport { StacksMainnet } from '@stacks/network';\n\nexport const CONTRACT_ADDRESS = 'SP1K1A1PMGW2ZJCNF46NWZWHG8TS1D23EGH1KNK60';\nexport const POOL_REGISTRY_CONTRACT_NAME = 'pool-registry-v1';\nexport const GENESIS_CONTRACT_ADDRESS = 'SP000000000000000000002Q6VF78';\nexport const BNS_CONTRACT_NAME = 'bns';\n\nexport const authOrigin = 'https://app.blockstack.org';\n\nexport const STACK_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\nexport const STACKS_API_WS_URL = 'ws://stacks-node-api.mainnet.stacks.co/';\nexport const STACKS_API_ACCOUNTS_URL = `${STACK_API_URL}/v2/accounts`;\n\nexport const NETWORK = new StacksMainnet();\nNETWORK.coreApiUrl = STACK_API_URL;\n\nconst basePath = STACK_API_URL;\nconst config = new Configuration({ basePath });\nexport const accountsApi = new AccountsApi(config);\nexport const smartContractsApi = new SmartContractsApi(config);\nexport const transactionsApi = new TransactionsApi(config);\nexport const infoApi = new InfoApi(config);\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport { accountsApi, authOrigin, NETWORK } from '../lib/constants';\nimport { TxStatus } from '../lib/transactions';\nimport { fetchAccount } from '../lib/account';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport {\n  bufferCV,\n  ClarityType,\n  contractPrincipalCV,\n  cvToString,\n  noneCV,\n  PostConditionMode,\n  someCV,\n  standardPrincipalCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport * as c32 from 'c32check';\nimport { poxAddrCV, poxAddrCVFromBitcoin } from '../lib/pools-utils';\nimport PoolInfo from './PoolInfo';\nimport { getPoolContractId } from '../lib/pools';\n\nfunction getPayout(pool) {\n  switch (pool.data.payout.data) {\n    case 'BTC':\n      return 'BTC';\n    case 'STX':\n      return 'STX';\n    default:\n      return undefined;\n  }\n}\n\nfunction getPayoutAddress(payout, stxAddress) {\n  console.log({ payout, stxAddress });\n  if (!stxAddress) return undefined;\n  switch (payout) {\n    case 'BTC':\n      return c32.c32ToB58(stxAddress);\n    case 'STX':\n      return stxAddress;\n    default:\n      return stxAddress;\n  }\n}\n\nfunction getPayoutAddressCV(payout, address) {\n  switch (payout) {\n    case 'BTC':\n      return poxAddrCVFromBitcoin(address);\n    case 'STX':\n      return poxAddrCV(address);\n    default:\n      return tupleCV({\n        hashbytes: bufferCV(Buffer.from([0])),\n        version: bufferCV(Buffer.from([0])),\n      });\n  }\n}\n\nexport function PoolJoin({ pool, ownerStxAddress, userSession }) {\n  console.log(pool);\n  console.log({ ownerStxAddress, userSession });\n  const { doContractCall } = useStacksJsConnect();\n  const amount = useRef();\n  const duration = useRef();\n  const payoutAddress = useRef();\n  const lockingPeriod = useRef();\n\n  const spinner = useRef();\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const [stxBalance, setStxBalance] = useState();\n\n  useEffect(() => {\n    if (ownerStxAddress) {\n      fetchAccount(ownerStxAddress)\n        .catch(e => {\n          setStatus('Failed to access your account', e);\n          console.log(e);\n        })\n        .then(async acc => {\n          setStatus(undefined);\n          console.log({ acc });\n        });\n      accountsApi.getAccountBalance({ principal: ownerStxAddress }).then(balance => {\n        const stxBalance = (parseInt(balance.stx.balance) - parseInt(balance.stx.locked)) / 1000000;\n        if (amount.current) {\n          amount.current.value = stxBalance;\n        }\n      });\n    }\n  }, [ownerStxAddress]);\n\n  const isSimple = pool.data.contract.type === ClarityType.OptionalSome;\n  const isExt = pool.data[\"extended-contract\"].type === ClarityType.OptionalSome;\n  const isExt2 = pool.data[\"extended2-contract\"].type === ClarityType.OptionalSome;\n  const contractId = getPoolContractId(pool);\n  const [contractAddress, contractName] = contractId.split('.');\n  const delegatee = cvToString(pool.data.delegatee);\n  const parts = delegatee.split('.');\n  const delegateeCV =\n    parts.length < 2 ? standardPrincipalCV(parts[0]) : contractPrincipalCV(parts[0], parts[1]);\n  const rewardBtcAddressCV = someCV(pool.data['pox-address']);\n  const payout = getPayout(pool);\n  const userPayoutAddress = getPayoutAddress(payout, ownerStxAddress);\n\n  console.log({ poolData: pool.data });\n\n  const joinAction = async () => {\n    spinner.current.classList.remove('d-none');\n\n    const amountCV = uintCV(amount.current.value.trim() * 1000000); // convert to uSTX\n    const durationCV = duration.current.value.trim()\n      ? someCV(uintCV(duration.current.value.trim()))\n      : noneCV();\n    const payoutAddressCV = getPayoutAddressCV(payout, payoutAddress.current.value.trim());\n    const lockingPeriodCV = uintCV(lockingPeriod.current.value.trim);\n    try {\n      setStatus(`Sending transaction`);\n      const functionArgs = isSimple\n        ? [amountCV, delegateeCV, durationCV, rewardBtcAddressCV]\n        : [amountCV, delegateeCV, durationCV, rewardBtcAddressCV, payoutAddressCV, lockingPeriodCV];\n      console.log({ functionArgs });\n      await doContractCall({\n        contractAddress,\n        contractName,\n        functionName: 'delegate-stx',\n        functionArgs,\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n          spinner.current.classList.add('d-none');\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n      spinner.current.classList.add('d-none');\n    }\n  };\n\n  return (\n    <div>\n      <h5>Join the pool</h5>\n      <PoolInfo pool={pool} />\n      <div className=\"NoteField\">\n        Choose an amount, how much you would like to \"delegately\" stack through this pool (can be\n        higher than your balance to compound future rewards if stacking indefinitely).\n        <input\n          type=\"number\"\n          step=\"any\"\n          min=\"0\"\n          ref={amount}\n          className=\"form-control\"\n          placeholder=\"Amount in STX\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') duration.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Duration of your pool membership\n        <input\n          type=\"text\"\n          ref={duration}\n          className=\"form-control\"\n          placeholder=\"Leave empty for indefinite duration\"\n          onKeyUp={e => {\n            if (e.key === 'Enter') lockingPeriod.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Locking Period (how long do you want to swim this time?)\n        <input\n          type=\"text\"\n          ref={lockingPeriod}\n          className=\"form-control\"\n          placeholder=\"Number of cycles\"\n          disabled={isSimple}\n          readOnly={pool && pool.data['locking-period'].type === ClarityType.List}\n          defaultValue={\n            pool && pool.data['locking-period'].type === ClarityType.List\n              ? pool.data['locking-period'].list.map(lp => lp.value.toString(10)).join(' - ')\n              : ''\n          }\n          onKeyUp={e => {\n            if (e.key === 'Enter') payoutAddress.current.focus();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        Payout address (how would you like to get your rewards)\n        <input\n          type=\"text\"\n          ref={payoutAddress}\n          className=\"form-control\"\n          defaultValue={userPayoutAddress}\n          disabled={isSimple}\n          onKeyUp={e => {\n            if (e.key === 'Enter') joinAction();\n          }}\n          onBlur={e => {\n            setStatus(undefined);\n          }}\n        />\n        <br />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={joinAction}>\n            <div\n              ref={spinner}\n              role=\"status\"\n              className=\"d-none spinner-border spinner-border-sm text-info align-text-top mr-2\"\n            />\n            Delegate\n          </button>\n        </div>\n      </div>\n      <div>\n        <TxStatus txId={txId} resultPrefix=\"You joined the pool \" />\n      </div>\n      {status && (\n        <>\n          <div>{status}</div>\n        </>\n      )}\n    </div>\n  );\n}\n","import {\n  bufferCVFromString,\n  callReadOnlyFunction,\n  ClarityType,\n  cvToString,\n  falseCV,\n  listCV,\n  trueCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport {\n  CONTRACT_ADDRESS,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  POOL_REGISTRY_CONTRACT_NAME,\n  STACK_API_URL,\n} from './constants';\n\nconst contractAddress = CONTRACT_ADDRESS;\nconst contractName = POOL_REGISTRY_CONTRACT_NAME;\n\nexport async function fetchPool(poolId) {\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pool',\n    functionArgs: [uintCV(poolId)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n  console.log(receipt);\n  if (receipt.type === ClarityType.OptionalNone) {\n    return undefined;\n  } else {\n    return receipt.value;\n  }\n}\n\nexport async function fetchPools({ verify = false, offset = 0 }) {\n  console.log({ verify, offset });\n  const idsCV = [...Array(10).keys()].map(i => uintCV(i + 1 + offset));\n  const receipt = await callReadOnlyFunction({\n    contractAddress,\n    contractName,\n    functionName: 'get-pools',\n    functionArgs: [listCV(idsCV)],\n    network: NETWORK,\n    senderAddress: contractAddress,\n  });\n\n  const verifiedPools = await Promise.all(\n    receipt.list.map(async (cv, index) => {\n      if (cv.type === ClarityType.OptionalNone) {\n        return cv;\n      } else {\n        const poolCV = cv.value;\n        poolCV.data['pool-id'] = idsCV[index];\n        if (verify) {\n          const verified = await verifyUrl(\n            poolCV.data.url.data,\n            usernameCVToName(poolCV.data.name)\n          );\n          poolCV.data['verified'] = verified ? trueCV() : falseCV();\n          return poolCV;\n        } else {\n          return poolCV;\n        }\n      }\n    })\n  );\n\n  return verifiedPools.reduce((result, cv) => {\n    if (cv.type === ClarityType.OptionalNone) {\n      return result;\n    } else {\n      result.push(cv);\n      return result;\n    }\n  }, []);\n}\n\nexport function nameToUsernameCV(fullQualifiedName) {\n  const parts = fullQualifiedName.split('.');\n  if ((parts.length = 2)) {\n    const [name, namespace] = parts;\n    console.log(parts);\n    return tupleCV({ name: bufferCVFromString(name), namespace: bufferCVFromString(namespace) });\n  } else {\n    return undefined;\n  }\n}\n\nexport function usernameCVToName(usernameCV) {\n  return `${usernameCV.data.name.buffer.toString()}.${usernameCV.data.namespace.buffer.toString()}`;\n}\n\nconst whiteListedUrls = {\n  'https://pool.friedger.de': 'friedgerpool.id',\n};\n\nexport async function verifyUrl(url, username) {\n  const whiteListedUsername = whiteListedUrls[url];\n  if (whiteListedUsername) {\n    return whiteListedUsername === username;\n  } else {\n    try {\n      const result = await fetch(url + '/manifest.json');\n      const manifest = await result.json();\n      console.log({ manifest, username }, manifest.author === username);\n      if (manifest.author) {\n        whiteListedUrls[url] = manifest.author;\n      }\n      return manifest.author === username;\n    } catch (e) {\n      console.log(e);\n      return false;\n    }\n  }\n}\n\nconst whiteListedContracts = {};\nwhiteListedContracts[\n  `${GENESIS_CONTRACT_ADDRESS}/pox/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/pool-trait`\n] = true;\n\nexport async function findTraitIndex(ctrAddress, ctrName) {\n  if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait')) {\n    return 0;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext')) {\n    return 1;\n  } else if (await verifyContractTrait(ctrAddress, ctrName, 'pool-trait-ext2')) {\n    return 2;\n  } else {\n    return -1;\n  }\n}\n\nexport const registerFunctions = ['register', 'register-ext', 'register-ext2'];\nexport const updateFunctions = ['update', 'update-ext', 'update-ext2'];\n\nexport function getPoolContractId(pool) {\n  const contractCV =\n    pool.data.contract.type === ClarityType.OptionalSome\n      ? pool.data.contract.value\n      : pool.data.contract.ext.type === ClarityType.OptionalSome\n      ? pool.data['extended-contract']\n      : pool.data['extended2-contract'];\n  return cvToString(contractCV);\n}\n\nasync function verifyContractTrait(ctrAddress, ctrName, traitName) {\n  const path = `${ctrAddress}/${ctrName}/${CONTRACT_ADDRESS}/${POOL_REGISTRY_CONTRACT_NAME}/${traitName}`;\n\n  console.log({ path });\n  if (path in whiteListedContracts) {\n    return whiteListedContracts[path];\n  } else {\n    let isImplemented;\n    const result = await fetch(`${STACK_API_URL}/v2/traits/${path}`);\n    console.log({ result });\n    if (result.status === 404) {\n      isImplemented = false;\n    } else {\n      isImplemented = (await result.json()).is_implemented;\n    }\n    whiteListedContracts.path = isImplemented;\n    return isImplemented;\n  }\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 587;","import { useCallback } from 'react';\nimport { AppConfig, UserSession } from '@stacks/connect-react';\nimport { showConnect } from '@stacks/connect';\nimport { authOrigin } from './constants';\nimport { atom, useAtom } from 'jotai';\nimport { useUpdateAtom } from 'jotai/utils';\n\nconst appConfig = new AppConfig(['store_write', 'publish_data']);\nexport const userSessionState = atom(new UserSession({ appConfig }));\nexport const userDataState = atom();\nexport const authResponseState = atom();\n\nexport const useConnect = () => {\n  const [userSession] = useAtom(userSessionState);\n  const setUserData = useUpdateAtom(userDataState);\n  const setAuthResponse = useUpdateAtom(authResponseState);\n\n  const onFinish = async payload => {\n    setAuthResponse(payload.authResponse);\n    const userData = await payload.userSession.loadUserData();\n    setUserData(userData);\n  };\n\n  const authOptions = {\n    authOrigin: authOrigin,\n    onFinish,\n    userSession, // usersession is already in state, provide it here\n    redirectTo: '/',\n    manifestPath: '/manifest.json',\n    appDetails: {\n      name: 'Pool Registry',\n      icon: '/pool-registry.png',\n    },\n  };\n\n  const handleOpenAuth = () => {\n    showConnect(authOptions);\n  };\n\n  const handleSignOut = useCallback(() => {\n    userSession?.signUserOut(\"/\");\n  }, [userSession]);\n\n  return { handleOpenAuth, handleSignOut, authOptions };\n};\n","import React from 'react';\nimport { useConnect } from '../lib/auth';\n\n// Landing page demonstrating Blockstack connect for registration\n\nexport default function Landing(props) {\n  const { handleOpenAuth } = useConnect();\n\n  return (\n    <div className=\"Landing\">\n      <div className=\"jumbotron jumbotron-fluid pt-3 mb-0\">\n        <div className=\"container\">\n          <div className=\"panel-landing text-center mt-3\">\n            <h1 className=\"landing-heading\">Members Only</h1>\n            <p className=\"lead\">Enjoy the exclusive Friedger Pool membership!</p>\n\n            <p className=\"card-link mb-5\">\n              <button className=\"btn btn-outline-primary\" type=\"button\" onClick={handleOpenAuth}>\n                Start now\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useConnect, userSessionState } from '../lib/auth';\nimport { useAtom } from 'jotai';\n// Authentication button adapting to status\n\nexport default function Auth() {\n  const { handleSignOut } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n\n  if (userSession?.isUserSignedIn()) {\n    return (\n      <button\n        className=\"btn btn-primary btn-lg\"\n        onClick={() => {\n          console.log('signOut');\n          handleSignOut();\n        }}\n      >\n        Log Out\n      </button>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect } from 'react';\nimport Landing from './pages/Landing';\nimport Overview from './pages/Overview';\nimport { Connect } from '@stacks/connect-react';\nimport { Link, Router } from '@reach/router';\nimport { NETWORK } from './lib/constants';\nimport Auth from './components/Auth';\nimport { userDataState, userSessionState, useConnect } from './lib/auth';\nimport { useAtom } from 'jotai';\nimport PoolRegistry from './pages/PoolRegistry';\nimport PoolDetails from './pages/PoolDetails';\nimport MyProfile from './pages/MyProfile';\nimport MyProfileRegister from './pages/MyProfileRegister';\nimport MyProfileEdit from './pages/MyProfileEdit';\n\nexport default function App(props) {\n  const { authOptions } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n  const [, setUserData] = useAtom(userDataState);\n  useEffect(() => {\n    if (userSession?.isUserSignedIn()) {\n      setUserData(userSession.loadUserData());\n    } else if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn();\n    }\n  }, [userSession, setUserData]);\n\n  return (\n    <>\n      <Auth className=\"ml-auto\" userSession={userSession} />\n      <Content userSession={userSession} />\n    </>\n  );\n}\n\nfunction Content({ userSession }) {\n  const authenticated = userSession && userSession.isUserSignedIn();\n  const decentralizedID =\n    userSession && userSession.isUserSignedIn() && userSession.loadUserData().decentralizedID;\n  return (\n    <>\n      {!authenticated && <Landing />}\n      {decentralizedID && (\n        <div>\n          <button>Claim Friedger Pool NFT</button>\n          <button>Change reward receiver</button>\n        </div>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n// Require Sass file so webpack can build it\n\nReactDOM.render(<App />, document.getElementById('react'));\n","import { AppConfig } from '@stacks/auth';\nimport { Storage } from '@stacks/storage';\nimport { addressToString } from '@stacks/transactions';\nimport { getStacksAccount } from './lib/account';\n\nexport const appConfig = new AppConfig(['store_write', 'publish_data']);\nexport const STX_JSON_PATH = 'stx.json';\n\nfunction afterSTXAddressPublished() {\n  console.log('STX address published');\n  stxAddressSemaphore.putting = false;\n}\n\nconst stxAddressSemaphore = { putting: false };\nexport function putStxAddress(userSession, address) {\n  const storage = new Storage({ userSession });\n  if (!stxAddressSemaphore.putting) {\n    stxAddressSemaphore.putting = true;\n    storage\n      .putFile(STX_JSON_PATH, JSON.stringify({ address }), {\n        encrypt: false,\n      })\n      .then(() => afterSTXAddressPublished())\n      .catch(r => {\n        console.log(r);\n        console.log('STX address NOT published, retrying');\n        storage.getFile(STX_JSON_PATH, { decrypt: false }).then(s => {\n          console.log({ s });\n          userSession\n            .putFile(STX_JSON_PATH, JSON.stringify({ address }), {\n              encrypt: false,\n            })\n            .then(() => afterSTXAddressPublished())\n            .catch(r => {\n              console.log('STX address NOT published');\n              console.log(r);\n              stxAddressSemaphore.putting = false;\n            });\n        });\n      });\n  }\n}\n\nexport const finished = onDidConnect => ({ userSession }) => {\n  onDidConnect({ userSession });\n  console.log(userSession.loadUserData());\n\n  const userData = userSession.loadUserData();\n  const { address } = getStacksAccount(userData.appPrivateKey);\n  console.log(JSON.stringify({ address: addressToString(address) }));\n  putStxAddress(userSession, addressToString(address));\n};\n","import {\n  createStacksPrivateKey,\n  getPublicKey,\n  addressFromPublicKeys,\n  AddressVersion,\n  AddressHashMode,\n  callReadOnlyFunction,\n  bufferCVFromString,\n  ClarityType,\n  cvToString,\n  cvToHex,\n  standardPrincipalCV,\n  hexToCV,\n} from '@stacks/transactions';\nimport { Storage } from '@stacks/storage';\nimport { STX_JSON_PATH } from '../UserSession';\nimport {\n  accountsApi,\n  BNS_CONTRACT_NAME,\n  GENESIS_CONTRACT_ADDRESS,\n  NETWORK,\n  smartContractsApi,\n  STACKS_API_ACCOUNTS_URL,\n} from './constants';\n\nexport function getStacksAccount(appPrivateKey) {\n  const privateKey = createStacksPrivateKey(appPrivateKey);\n  const publicKey = getPublicKey(privateKey);\n  const address = addressFromPublicKeys(\n    AddressVersion.MainnetSingleSig,\n    AddressHashMode.SerializeP2PKH,\n    1,\n    [publicKey]\n  );\n  return { privateKey, address };\n}\n\nexport async function getUserAddress(userSession, username) {\n  const parts = username.split('.');\n  if (parts.length === 2) {\n    console.log(parts);\n    const result = await callReadOnlyFunction({\n      contractAddress: GENESIS_CONTRACT_ADDRESS,\n      contractName: BNS_CONTRACT_NAME,\n      functionName: 'name-resolve',\n      functionArgs: [bufferCVFromString(parts[1]), bufferCVFromString(parts[0])],\n      network: NETWORK,\n      senderAddress: GENESIS_CONTRACT_ADDRESS,\n    });\n    if (result.type === ClarityType.ResponseOk) {\n      return { address: cvToString(result.value.data.owner) };\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Uses the AccountsApi of the stacks blockchain api client library,\n * returns the stacks balance object with property `balance` in decimal.\n */\nexport function fetchAccount(addressAsString) {\n  console.log(`Checking account \"${addressAsString}\"`);\n  if (addressAsString) {\n    return accountsApi\n      .getAccountBalance({ principal: addressAsString })\n      .then(response => response.stx);\n  } else {\n    return Promise.reject();\n  }\n}\n\n/**\n * Uses the RCP api of the stacks node directly,\n * returns the json object with property `balance` in hex.\n */\nexport function fetchAccount2(addressAsString) {\n  console.log('Checking account');\n  const balanceUrl = `${STACKS_API_ACCOUNTS_URL}/${addressAsString}`;\n  return fetch(balanceUrl).then(r => {\n    console.log({ r });\n    return r.json();\n  });\n}\n\nexport async function getUsername(addressAsString) {\n  const nameResult = await smartContractsApi.callReadOnlyFunction({\n    contractAddress: GENESIS_CONTRACT_ADDRESS,\n    contractName: 'bns',\n    functionName: 'resolve-principal',\n    readOnlyFunctionArgs: {\n      sender: addressAsString,\n      arguments: [cvToHex(standardPrincipalCV(addressAsString))],\n    },\n  });\n  if (nameResult.okay && nameResult.result !== '0x09') {\n    const resultCV = hexToCV(nameResult.result);\n    if (resultCV.type === ClarityType.ResponseOk) {\n      return resultCV.value;\n    } else {\n      console.log({ nameResult });\n      console.log('No name found. Error: ' + resultCV.value.data.code.value.toString(10));\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n","import { AddressHashMode, bufferCV, tupleCV } from '@stacks/transactions';\nimport { address } from 'bitcoinjs-lib';\nimport BN from 'bn.js';\nimport * as c32 from 'c32check';\n\nfunction getAddressHashMode(btcAddress) {\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    if (data.length === 32) {\n      return AddressHashMode.SerializeP2WSH;\n    } else {\n      return AddressHashMode.SerializeP2WPKH;\n    }\n  } else {\n    const { version } = address.fromBase58Check(btcAddress);\n    switch (version) {\n      case 0:\n        return AddressHashMode.SerializeP2PKH;\n      case 111:\n        return AddressHashMode.SerializeP2PKH;\n      case 5:\n        return AddressHashMode.SerializeP2SH;\n      case 196:\n        return AddressHashMode.SerializeP2SH;\n      default:\n        throw new Error('Invalid pox address version');\n    }\n  }\n}\n\nexport function addressHashModeToBtcVersion(hashMode, mainnet = true) {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return mainnet ? 0 : 111;\n    case AddressHashMode.SerializeP2SH:\n      return mainnet ? 5 : 196;\n    default:\n      throw new Error('Invalid hash mode');\n  }\n}\n\nfunction decodeBtcAddress(btcAddress) {\n  const hashMode = getAddressHashMode(btcAddress);\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    return {\n      hashMode,\n      data,\n    };\n  } else {\n    const { hash } = address.fromBase58Check(btcAddress);\n    return {\n      hashMode,\n      data: hash,\n    };\n  }\n}\n\nfunction decodeStxAddress(stxAddress) {\n  const btcAddress = c32.c32ToB58(stxAddress);\n  return decodeBtcAddress(btcAddress);\n}\n\nexport function poxAddrCVFromBitcoin(btcAddress) {\n  const { hashMode, data } = decodeBtcAddress(btcAddress);\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxAddrCV(stxAddress) {\n  const { hashMode, data } = decodeStxAddress(stxAddress);\n  console.log({hashMode, data})\n  return tupleCV({\n    hashbytes: bufferCV(data),\n    version: bufferCV(Buffer.from([hashMode])),\n  });\n}\n\nexport function poxCVToBtcAddress(poxAddrCV) {\n  return address.toBase58Check(\n    poxAddrCV.data.hashbytes.buffer,\n    addressHashModeToBtcVersion(poxAddrCV.data.version.buffer.valueOf()[0], true)\n  );\n}\n"],"sourceRoot":""}