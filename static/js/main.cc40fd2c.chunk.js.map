{"version":3,"sources":["../node_modules/@stencil/core/internal/client lazy /^/.//.*$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","lib/constants.js","lib/auth.js","pages/Landing.js","components/Auth.js","App.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","FRIEDGER_POOL_NFT","STACK_API_URL","NETWORK","StacksMainnet","coreApiUrl","config","Configuration","basePath","AccountsApi","SmartContractsApi","TransactionsApi","InfoApi","appConfig","AppConfig","userSessionState","atom","UserSession","userDataState","authResponseState","useConnect","useAtom","userSession","setUserData","useUpdateAtom","setAuthResponse","authOptions","authOrigin","onFinish","payload","a","authResponse","loadUserData","userData","redirectTo","manifestPath","appDetails","name","icon","handleOpenAuth","showConnect","handleSignOut","useCallback","signUserOut","Landing","props","className","type","onClick","Auth","isUserSignedIn","console","log","App","useEffect","isSignInPending","handlePendingSignIn","Content","authenticated","decentralizedID","useState","setStatus","setTxId","amount","useRef","receiver","doContractCall","useStacksJsConnect","claimNFT","contractAddress","contractName","functionName","functionArgs","uintCV","current","value","trim","postConditionMode","PostConditionMode","Deny","postConditions","network","finished","data","undefined","txId","toString","ref","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc40fd2c.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 564;","import {\n  TransactionsApi,\n  SmartContractsApi,\n  AccountsApi,\n  Configuration,\n  InfoApi,\n} from '@stacks/blockchain-api-client';\nimport { StacksMainnet } from '@stacks/network';\n\nexport const CONTRACT_ADDRESS = 'SP1K1A1PMGW2ZJCNF46NWZWHG8TS1D23EGH1KNK60';\nexport const POOL_REGISTRY_CONTRACT_NAME = 'pool-registry-v1';\nexport const GENESIS_CONTRACT_ADDRESS = 'SP000000000000000000002Q6VF78';\nexport const BNS_CONTRACT_NAME = 'bns';\nexport const FRIEDGER_POOL_NFT = {\n  address: 'SP2PABAF9FTAJYNFZH93XENAJ8FVY99RRM50D2JG9',\n  name: 'friedger-pool-nft',\n};\n\nexport const authOrigin = 'https://app.blockstack.org';\n\nexport const STACK_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\nexport const STACKS_API_WS_URL = 'ws://stacks-node-api.mainnet.stacks.co/';\nexport const STACKS_API_ACCOUNTS_URL = `${STACK_API_URL}/v2/accounts`;\n\nexport const NETWORK = new StacksMainnet();\nNETWORK.coreApiUrl = STACK_API_URL;\n\nconst basePath = STACK_API_URL;\nconst config = new Configuration({ basePath });\nexport const accountsApi = new AccountsApi(config);\nexport const smartContractsApi = new SmartContractsApi(config);\nexport const transactionsApi = new TransactionsApi(config);\nexport const infoApi = new InfoApi(config);\n","import { useCallback } from 'react';\nimport { AppConfig, UserSession } from '@stacks/connect-react';\nimport { showConnect } from '@stacks/connect';\nimport { authOrigin } from './constants';\nimport { atom, useAtom } from 'jotai';\nimport { useUpdateAtom } from 'jotai/utils';\n\nconst appConfig = new AppConfig(['store_write', 'publish_data']);\nexport const userSessionState = atom(new UserSession({ appConfig }));\nexport const userDataState = atom();\nexport const authResponseState = atom();\n\nexport const useConnect = () => {\n  const [userSession] = useAtom(userSessionState);\n  const setUserData = useUpdateAtom(userDataState);\n  const setAuthResponse = useUpdateAtom(authResponseState);\n\n  const onFinish = async payload => {\n    setAuthResponse(payload.authResponse);\n    const userData = await payload.userSession.loadUserData();\n    setUserData(userData);\n  };\n\n  const authOptions = {\n    authOrigin: authOrigin,\n    onFinish,\n    userSession, // usersession is already in state, provide it here\n    redirectTo: '/',\n    manifestPath: '/manifest.json',\n    appDetails: {\n      name: 'Pool Registry',\n      icon: '/pool-registry.png',\n    },\n  };\n\n  const handleOpenAuth = () => {\n    showConnect(authOptions);\n  };\n\n  const handleSignOut = useCallback(() => {\n    userSession?.signUserOut(\"/\");\n  }, [userSession]);\n\n  return { handleOpenAuth, handleSignOut, authOptions };\n};\n","import React from 'react';\nimport { useConnect } from '../lib/auth';\n\n// Landing page demonstrating Blockstack connect for registration\n\nexport default function Landing(props) {\n  const { handleOpenAuth } = useConnect();\n\n  return (\n    <div className=\"Landing\">\n      <div className=\"jumbotron jumbotron-fluid pt-3 mb-0\">\n        <div className=\"container\">\n          <div className=\"panel-landing text-center mt-3\">\n            <h1 className=\"landing-heading\">Members Only</h1>\n            <p className=\"lead\">Enjoy the exclusive Friedger Pool membership!</p>\n\n            <p className=\"card-link mb-5\">\n              <button className=\"btn btn-outline-primary\" type=\"button\" onClick={handleOpenAuth}>\n                Start now\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useConnect, userSessionState } from '../lib/auth';\nimport { useAtom } from 'jotai';\n// Authentication button adapting to status\n\nexport default function Auth() {\n  const { handleSignOut } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n\n  if (userSession?.isUserSignedIn()) {\n    return (\n      <button\n        className=\"btn btn-primary btn-lg\"\n        onClick={() => {\n          console.log('signOut');\n          handleSignOut();\n        }}\n      >\n        Log Out\n      </button>\n    );\n  } else {\n    return null;\n  }\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport Landing from './pages/Landing';\nimport { Connect } from '@stacks/connect-react';\nimport { FRIEDGER_POOL_NFT, NETWORK } from './lib/constants';\nimport Auth from './components/Auth';\nimport { userDataState, userSessionState, useConnect } from './lib/auth';\nimport { useAtom } from 'jotai';\nimport { useConnect as useStacksJsConnect } from '@stacks/connect-react';\nimport { PostConditionMode, uintCV } from '@stacks/transactions';\n\nexport default function App(props) {\n  const { authOptions } = useConnect();\n  const [userSession] = useAtom(userSessionState);\n  const [, setUserData] = useAtom(userDataState);\n  useEffect(() => {\n    if (userSession?.isUserSignedIn()) {\n      setUserData(userSession.loadUserData());\n    } else if (userSession.isSignInPending()) {\n      userSession.handlePendingSignIn();\n    }\n  }, [userSession, setUserData]);\n\n  return (\n    <Connect authOptions={authOptions}>\n      <Auth userSession={userSession} />\n      <Content userSession={userSession} />\n    </Connect>\n  );\n}\n\nfunction Content({ userSession }) {\n  const authenticated = userSession && userSession.isUserSignedIn();\n  const decentralizedID =\n    userSession && userSession.isUserSignedIn() && userSession.loadUserData().decentralizedID;\n  const [status, setStatus] = useState();\n  const [txId, setTxId] = useState();\n  const amount = useRef();\n  const receiver = useRef();\n\n  const { doContractCall } = useStacksJsConnect();\n\n  const claimNFT = async () => {\n    try {\n      setStatus(`Sending transaction`);\n      await doContractCall({\n        contractAddress: FRIEDGER_POOL_NFT.address,\n        contractName: FRIEDGER_POOL_NFT.name,\n        functionName: 'claim',\n        functionArgs: [uintCV(amount.current.value.trim())],\n        postConditionMode: PostConditionMode.Deny,\n        postConditions: [],\n        userSession,\n        network: NETWORK,\n        finished: data => {\n          console.log(data);\n          setStatus(undefined);\n          setTxId(data.txId);\n        },\n      });\n    } catch (e) {\n      console.log(e);\n      setStatus(e.toString());\n    }\n  };\n  const changeRewardReceiver = () => {};\n  return (\n    <>\n      {!authenticated && <Landing />}\n      {decentralizedID && (\n        <div>\n          <section>\n            <h5>Claim Friedger Pool NFT</h5>\n            Pay what you want (to Friedger)\n            <div>\n              <input ref={amount} placeholder=\"5 STX\" />\n              <button className=\"read_more\" onClick={claimNFT}>\n                Claim\n              </button>\n            </div>\n          </section>\n          <section>\n            <h5>Change reward receiver</h5>\n            Enter the Stacks address that the pool admin should use for your reward payout.\n            <div>\n              <input ref={receiver} placeholder=\"SP1234..\" />\n              <button className=\"read_more\" onClick={changeRewardReceiver}>\n                Submit\n              </button>\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n// Require Sass file so webpack can build it\n\nReactDOM.render(<App />, document.getElementById('react'));\n"],"sourceRoot":""}